[core]
dags_folder = /root/airflow/dags
executor = CeleryExecutor
parallelism = 32
load_examples = False
dags_are_paused_at_creation = False
sql_alchemy_pool_enabled = False
plugins_folder = /root/airflow/plugins
sql_alchemy_conn = $SQL_ALCHEMY_CONN
fernet_key = sensitive data....

[logging]
logging_level = DEBUG
base_log_folder = /root/airflow/logs
log_format = [%%(asctime)s] [%%(levelname)s] %%(filename)s:%%(lineno)d - %%(message)s
simple_log_format = [%%(asctime)s] [%%(levelname)s] - %%(message)s
colored_log_format = [%%(blue)s%%(asctime)s%%(reset)s] [%%(log_color)s%%(levelname)s%%(reset)s] %%(blue)s%%(filename)s:%%(reset)s%%(lineno)d - %%(log_color)s%%(message)s%%(reset)s

[webserver]
base_url = https://abc.com/pipelines
web_server_port = 8080
access_logformat = %%(t)s %%(h)s %%(l)s %%(u)s "%%(r)s" %%(s)s %%(b)s "%%(f)s" "%%(a)s"
# Secret key used to run your flask app It should be as random as possible
secret_key = sensitive data

[cli]
endpoint_url = https://abc.com/pipelines

[admin]
sensitive_variable_fields = jwt

[api]
auth_backend = airflow.api.auth.backend.basic_auth

[celery]

# This section only applies if you are using the CeleryExecutor in
# [core] section above

# The app name that will be used by celery
celery_app_name = airflow.executors.celery_executor

# The concurrency that will be used when starting workers with the
# "airflow worker" command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
worker_concurrency = 16

# When you start an airflow worker, airflow starts a tiny web server
# subprocess to serve the workers local log files to the airflow main
# web server, who then builds pages and sends them to users. This defines
# the port on which the logs are served. It needs to be unused, and open
# visible from the main web server to connect into the workers.
worker_log_server_port = 8793

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more
# information.
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#broker-settings
broker_url = redis://:abc.com:6379
# The Celery result_backend. When a job finishes, it needs to update the
#app.conf.# metadata of the job. Therefore it will post a message on a message bus,
# or insert it into a database (depending of the backend)
# This status is used by the scheduler to update the state of the task
# The use of a database is highly recommended
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings
result_backend = $RESULT_BACKEND

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
# it `airflow flower`. This defines the IP that Celery Flower runs on
flower_host = 0.0.0.0

# The root URL for Flower
# Ex: flower_url_prefix = /flower
flower_url_prefix = /flower/

# This defines the port that Celery Flower runs on
flower_port = 5555

# Securing Flower with Basic Authentication
# Accepts user:password pairs separated by a comma
# Example: flower_basic_auth = user1:password1,user2:password2
flower_basic_auth = $FLOWER_BASIC_AUTH

# Default queue that tasks get assigned to and that worker listen on.
default_queue = default

# How many processes CeleryExecutor uses to sync task state.
# 0 means to use max(1, number of cores - 1) processes.
sync_parallelism = 0

# Import path for celery configuration options
celery_config_options = celery_config.CELERY_CONFIG
worker_log_format = [%%(asctime)s] [%%(levelname)s] %%(processName)s - %%(message)s

[celery_broker_transport_options]
master_name = mymaster
